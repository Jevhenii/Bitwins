@function convert-angle($value, $unit) {
    $convertable-units: deg grad turn rad;
    $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
    @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
      @return $value
               / nth($conversion-factors, index($convertable-units, unit($value)))
               * nth($conversion-factors, index($convertable-units, $unit));
    }
    
    @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
  }
  
  /// Test if `$value` is an angle
  /// @param {*} $value - Value to test
  /// @return {Bool}
  @function is-direction($value) {
    $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
    
    @return $is-direction or $is-angle;
  }
  
  /// Convert a direction to legacy syntax
  /// @param {Keyword | Angle} $value - Value to convert
  /// @require {function} is-direction
  /// @require {function} convert-angle
  @function legacy-direction($value) {
    @if is-direction($value) == false {
      @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
    }
    
    $conversion-map: ( 
      to top          : bottom,
      to top right    : bottom left,
      to right top    : left bottom,
      to right        : left,
      to bottom right : top left,
      to right bottom : left top,
      to bottom       : top,
      to bottom left  : top right,
      to left bottom  : right top,
      to left         : right,
      to left top     : right bottom,
      to top left     : bottom right
    );
      
    @if map-has-key($conversion-map, $value) {
      @return map-get($conversion-map, $value);
    }
    
    @return 90deg - convert-angle($value, 'deg');
  }
  

  /// @access public
  /// @param {String | List | Angle} $direction - Linear gradient direction
  /// @param {Arglist} $color-stops - List of color-stops composing the gradient
  @mixin linear-gradient($direction, $color-stops...) {
    @if is-direction($direction) == false {
      $color-stops: ($direction, $color-stops);
      $direction: 180deg;
    }
    
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
  }
  
  // Tests
//   .test-1 {
//     @include linear-gradient(#31B7D7, #EDAC7D);
//   }
  
//   .test-2 {
//     @include linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);
//   }
  
//   .test-3 {
//     @include linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%);
//   }

// Screen size variables
$screen-xs-min: 425px;  // Tiny phones
$screen-sm-min: 576px;  // Small tablets and large smartphones (landscape view)
$screen-md-min: 768px;  // Small tablets (portrait view)
$screen-lg-min: 992px;  // Tablets and small desktops
$screen-xl-min: 1200px; // Large tablets and desktops

// Mixins
@mixin xs { @media (max-width: #{$screen-xs-min}) {@content;} } // Tiny devices
@mixin sm { @media (max-width: #{$screen-sm-min}) {@content;} } // Small devices
@mixin md { @media (max-width: #{$screen-md-min}) {@content;} } // Medium devices
@mixin lg { @media (max-width: #{$screen-lg-min}) {@content;} } // Large devices
@mixin xl { @media (max-width: #{$screen-xl-min}) {@content;} } // Extra large devices

/* A class that will respond differently in different resolutions */
// .sample-padding-class {
  
//     padding-bottom: 200%; // Default property, this will be applied to all screen sizes
//     color: #FFF;          // Unless overriden below
    
//     @include sm {         // 576px window width and more
//       padding-bottom: 100%;
//       color: #000;
//     }
    
//     @include md {         // 768px window width and more
//       padding-bottom: 50%;
//     }
    
//     @include lg {         // 992px window width and more
//       padding-bottom: 10%;
//     }
  
//     @include xl {         // 1200px window width and more
//       padding-top: 20%;
//       padding-bottom: 0;
//       color: #1337;
//     }
//   }